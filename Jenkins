Setting Up a Jenkins Pipeline Without Writing a Script for a GitHub Repository

This guide outlines the steps to set up a Jenkins pipeline using the graphical user interface (GUI) to connect to a GitHub repository, specifically `https://github.com/SuneelG2021/spring3_project.git`.

---

## 1. Launch an EC2 Instance
### 1.1 Create an EC2 Instance
- Log in to the AWS Management Console and launch a new EC2 instance using Amazon Linux 2 or another preferred Linux distribution.
- Choose an instance type (e.g., `t2.micro`).
- Configure instance settings, ensuring that security groups allow traffic on ports 22 (SSH) and 8080 (Jenkins).

### 1.2 Connect to Your EC2 Instance
- Use SSH to connect:
  ```bash
  ssh -i your-key.pem ec2-user@your-ec2-public-ip
  ```

---

## 2. Install Jenkins on EC2
### 2.1 Add Jenkins Repository
```bash
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
```

### 2.2 Import Jenkins GPG Key
```bash
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
```

### 2.3 Update Yum Packages
```bash
sudo yum update -y
```

### 2.4 Install Jenkins
```bash
sudo yum install jenkins -y
```

---

## 3. Install Java 17 (OpenJDK)
### 3.1 Install Java 17
```bash
sudo yum install java-17-amazon-corretto -y
```

### 3.2 Verify Java Installation
```bash
java -version
```

---

## 4. Configure Java Environment Variables
### 4.1 Set JAVA_HOME and PATH
```bash
echo "export JAVA_HOME=$(dirname $(dirname $(readlink $(readlink $(which java)))))" | sudo tee -a /etc/profile
echo "export PATH=$PATH:$JAVA_HOME/bin" | sudo tee -a /etc/profile
source /etc/profile
```

### 4.2 Verify JAVA_HOME
```bash
echo $JAVA_HOME
```

---

## 5. Start Jenkins
### 5.1 Start Jenkins Service
```bash
sudo systemctl start jenkins
```

### 5.2 Enable Jenkins at Boot
```bash
sudo systemctl enable jenkins
```

### 5.3 Check Jenkins Status
```bash
sudo systemctl status jenkins
```

---

## 6. Adjust Security Group or Firewall Settings
### 6.1 Allow Jenkins Port (8080)
- Open port 8080 in your security group settings in AWS:
  ```bash
  sudo firewall-cmd --permanent --zone=public --add-port=8080/tcp
  sudo firewall-cmd --reload
  ```

---

## 7. Access Jenkins and Complete Setup
### 7.1 Access Jenkins
- Open a browser and navigate to:
  ```
  http://<your-ec2-public-ip>:8080
  ```

### 7.2 Unlock Jenkins
```bash
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
```

### 7.3 Install Suggested Plugins
- Choose "Install suggested plugins" for a quick setup.

### 7.4 Create Admin User
- Follow prompts to create an admin account.

---

## 8. Install and Configure Maven
### 8.1 Download Maven
```bash
wget https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz
```

### 8.2 Extract Maven
```bash
sudo tar -xvzf apache-maven-3.9.9-bin.tar.gz -C /opt/
```

### 8.3 Rename Maven Folder
```bash
sudo mv /opt/apache-maven-3.9.9 /opt/maven
```

### 8.4 Set Maven Environment Variables
```bash
echo "export M2_HOME=/opt/maven" | sudo tee -a /etc/profile
echo "export M2=$M2_HOME/bin" | sudo tee -a /etc/profile
echo "export PATH=$PATH:$M2" | sudo tee -a /etc/profile
source /etc/profile
```

### 8.5 Verify Maven Installation
```bash
mvn -version
```

---

## 9. Install Git
### 9.1 Install Git
```bash
sudo yum install git -y
```

### 9.2 Verify Git Installation
```bash
git --version
```

---

## 10. Configure Jenkins for Java, Maven, and Git
### 10.1 Open Jenkins Dashboard
- Navigate to Jenkins home and log in.

### 10.2 Navigate to Jenkins Configuration
- Go to `Manage Jenkins` from the sidebar.

### 10.3 Access Global Tool Configuration
- Click on `Manage Jenkins` -> `Global Tool Configuration`.

### 10.4 Configure JDK
- Under the `JDK` section, click `Add JDK`, uncheck "Install automatically", and enter the name and path (e.g., `/usr/lib/jvm/java-17-amazon-corretto`).

### 10.5 Configure Maven
- Under the `Maven` section, click `Add Maven`, enter a name (e.g., `Maven 3.9.9`), and provide the path (e.g., `/opt/maven`).

### 10.6 Configure Git
- Under the `Git` section, ensure the Git executable path is set (e.g., `/usr/bin/git`).

---

## 11. Running a Jenkins Pipeline Without a Script

### 11.1 Create a New Pipeline Project
- Go to the Jenkins Dashboard, click `New Item`, name it (e.g., `MyFirstPipeline`), and select `Freestyle Project`.

### 11.2 Configure Source Code Management (SCM)
- In the `Source Code Management` section, select `Git`.
- Enter the repository URL: `https://github.com/SuneelG2021/spring3_project.git`.
- Specify the branch to build (e.g., `*/main`).

### 11.3 Define Build Steps Using the "Build" Section
- **Add Build Steps:**
  - In the `Build` section, click `Add build step`:
    - **Invoke top-level Maven targets:** Set the goal to `clean install`.
    - **Execute shell:** Use commands like:
    ```bash
    mvn clean compile
    ```

### 11.4 Configure Post-Build Actions
- In the `Post-build Actions` section, add options like `Archive the artifacts` or `Email Notification`.

### 11.5 Save and Build the Project
- Click `Save`, then go to the projectâ€™s main page and click `Build Now` to trigger the build.

### 11.6 Monitor and View Build Results
- Click the build number in the `Build History` to view `Console Output` for logs and check the build status.

---

### Summary
This guide provides a comprehensive process to set up and run a Jenkins pipeline using the GUI, connected to the GitHub repository `https://github.com/SuneelG2021/spring3_project.git`. The configuration is completed entirely through the Jenkins interface, without the need for script writing.

---

### Final Steps
Once you have this text, you can follow the steps I previously provided to create a Word document. If you need any more help, just let me know!
